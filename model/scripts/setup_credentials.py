#!/usr/bin/env python3
"""
Secure credential setup for API models
"""

import sys
import os
import getpass
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

from model.base import CredentialManager


def interactive_setup():
    """Interactive credential setup"""
    print("üîê Goblin API Credential Setup")
    print("=" * 40)
    print("This will help you securely configure API credentials for hate speech models.")
    print()
    
    # Check current status
    cm = CredentialManager()
    validation = cm.validate_credentials(['claude', 'openai'])
    
    print("Current credential status:")
    for api, valid in validation.items():
        status = "‚úÖ Found" if valid else "‚ùå Missing"
        print(f"  {api.upper()}: {status}")
    print()
    
    # Offer setup options
    print("Setup options:")
    print("1. Create .env file (recommended)")
    print("2. Set environment variables") 
    print("3. Create user credential file")
    print("4. Show setup instructions")
    print("5. Test current credentials")
    
    choice = input("\nChoose an option (1-5): ").strip()
    
    if choice == '1':
        setup_env_file()
    elif choice == '2':
        show_env_vars()
    elif choice == '3':
        setup_user_file()
    elif choice == '4':
        show_instructions()
    elif choice == '5':
        test_credentials()
    else:
        print("Invalid choice")


def setup_env_file():
    """Create .env file with user input"""
    print("\nüìÅ Creating .env file")
    print("-" * 20)
    
    env_content = []
    
    # Claude API key
    claude_key = getpass.getpass("Enter your Anthropic/Claude API key (hidden input): ").strip()
    if claude_key:
        env_content.append(f"ANTHROPIC_API_KEY={claude_key}")
    
    # OpenAI API key (optional)
    openai_key = getpass.getpass("Enter your OpenAI API key (optional, press enter to skip): ").strip()
    if openai_key:
        env_content.append(f"OPENAI_API_KEY={openai_key}")
    
    # HuggingFace token (optional)
    hf_token = getpass.getpass("Enter your HuggingFace token (optional, press enter to skip): ").strip()
    if hf_token:
        env_content.append(f"HUGGINGFACE_TOKEN={hf_token}")
    
    if env_content:
        # Write .env file
        with open('.env', 'w') as f:
            f.write("# API Credentials for Goblin Hate Speech Models\n")
            f.write("# Generated by setup script\n\n")
            for line in env_content:
                f.write(line + "\n")
        
        print("‚úÖ Created .env file successfully!")
        
        # Add to .gitignore
        gitignore_path = '.gitignore'
        if os.path.exists(gitignore_path):
            with open(gitignore_path, 'r') as f:
                content = f.read()
            
            if '.env' not in content:
                with open(gitignore_path, 'a') as f:
                    f.write("\n# API credentials\n.env\n")
                print("‚úÖ Added .env to .gitignore")
        else:
            with open(gitignore_path, 'w') as f:
                f.write("# API credentials\n.env\n")
            print("‚úÖ Created .gitignore with .env")
        
        # Test credentials
        test_credentials()
    else:
        print("No credentials provided")


def show_env_vars():
    """Show how to set environment variables"""
    print("\nüåç Setting Environment Variables")
    print("-" * 30)
    print("Add these to your shell profile (.bashrc, .zshrc, etc.):")
    print()
    print("export ANTHROPIC_API_KEY='your_claude_api_key_here'")
    print("export OPENAI_API_KEY='your_openai_api_key_here'")  
    print("export HUGGINGFACE_TOKEN='your_hf_token_here'")
    print()
    print("Or set them temporarily:")
    print("ANTHROPIC_API_KEY='your_key' python your_script.py")


def setup_user_file():
    """Setup user credential file"""
    import json
    
    print("\nüë§ Creating user credential file")
    print("-" * 30)
    
    home_dir = os.path.expanduser("~")
    cred_file = os.path.join(home_dir, ".goblin_credentials.json")
    
    credentials = {}
    
    claude_key = getpass.getpass("Enter your Anthropic/Claude API key: ").strip()
    if claude_key:
        credentials["claude_api_key"] = claude_key
    
    openai_key = getpass.getpass("Enter your OpenAI API key (optional): ").strip()
    if openai_key:
        credentials["openai_api_key"] = openai_key
    
    if credentials:
        with open(cred_file, 'w') as f:
            json.dump(credentials, f, indent=2)
        
        # Set secure permissions (Unix/Linux)
        if hasattr(os, 'chmod'):
            os.chmod(cred_file, 0o600)  # Read/write for owner only
        
        print(f"‚úÖ Created credential file: {cred_file}")
        print("‚úÖ Set secure permissions (owner read/write only)")
    else:
        print("No credentials provided")


def show_instructions():
    """Show detailed setup instructions"""
    cm = CredentialManager()
    print(cm.get_setup_instructions())


def test_credentials():
    """Test current credential setup"""
    print("\nüß™ Testing Credentials")
    print("-" * 20)
    
    cm = CredentialManager()
    validation = cm.validate_credentials(['claude', 'openai'])
    
    all_good = True
    
    for api, valid in validation.items():
        if valid:
            print(f"‚úÖ {api.upper()}: Credential found")
            
            # Try a simple API test if possible
            if api == 'claude':
                try:
                    from model.api import ClaudeHateSpeechModel
                    from model.base import ModelConfig
                    
                    config = ModelConfig(
                        model_name="test_claude",
                        model_type="api",
                        config={}  # Will use credential manager
                    )
                    
                    model = ClaudeHateSpeechModel(config)
                    print(f"   API client initialized successfully")
                except Exception as e:
                    print(f"   ‚ö†Ô∏è  API client failed: {e}")
                    
        else:
            print(f"‚ùå {api.upper()}: Credential missing")
            all_good = False
    
    if all_good:
        print("\nüéâ All configured credentials are working!")
    else:
        print("\n‚ö†Ô∏è  Some credentials are missing. Use options 1-3 to set them up.")


def main():
    """Main setup function"""
    try:
        interactive_setup()
    except KeyboardInterrupt:
        print("\n\nSetup cancelled by user")
    except Exception as e:
        print(f"\nError during setup: {e}")


if __name__ == "__main__":
    main()